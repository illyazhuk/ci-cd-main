name: Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Enter the release version (e.g. v1.2.3)'
        required: true
      client1_branch:
        description: 'Branch for client1 (default: main)'
        required: false
        default: 'main'
      client2_branch:
        description: 'Branch for client2 (default: main)'
        required: false
        default: 'main'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch available branches for client1
        run: |
          echo "Fetching available branches for client1..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/illyazhuk/client1/branches" | jq '.[].name'

      - name: Fetch available branches for client2
        run: |
          echo "Fetching available branches for client2..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/illyazhuk/client2/branches" | jq '.[].name'

      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      
      - name: Update Submodules
        working-directory: .
        run: |
            git submodule update --init --recursive  # Ensure submodules are properly initialized


      - name: Update submodule client1
        working-directory: default/procentric/app/client1
        run: |
            git status
            git fetch origin
            # Check if the branch exists remotely
            if git ls-remote --heads origin ${{ github.event.inputs.client1_branch }}; then
                if [[ "${{ github.event.inputs.client1_branch }}" == "main" ]] || [[ "${{ github.event.inputs.client1_branch }}" == "master" ]]; then
                    echo "Skip checkout for main/master branch - default"
                else
                    # If the branch exists remotely, checkout and track the branch
                    git checkout -B "${{ github.event.inputs.client1_branch }}" origin/"${{ github.event.inputs.client1_branch }}"
            fi
            else
                # If the branch doesn't exist remotely, exit with error
                echo "Error: Branch '${{ github.event.inputs.client1_branch }}' does not exist in origin."
                exit 1
            fi

      - name: Update submodule client2
        working-directory: default/remote/client2
        run: |
            
            git fetch --all  # Fetch all branches for the submodule
            if git ls-remote --heads origin "${{ github.event.inputs.client2_branch }}"; then
                if [[ "${{ github.event.inputs.client2_branch }}" == "main" ]] || [[ "${{ github.event.inputs.client2_branch }}" == "master" ]]; then
                    echo "Skip checkout for main/master branch - default"
                else
                    # Checkout and track the desired branch
                    git checkout -B "${{ github.event.inputs.client2_branch }}" origin/"${{ github.event.inputs.client2_branch }}"
                fi
            else
                echo "Error: Branch '${{ github.event.inputs.client2_branch }}' does not exist in client1 submodule."
                exit 1
            fi

  

      - name: Update main repository submodule pointers
        run: |
          git submodule update --remote

      - name: Commit updated submodule pointers
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git diff-index --quiet HEAD || git commit -m "Update submodules to latest branches"

      - name: Push changes to main branch
        run: |
          git push origin main

      - name: Create and push release tag
        run: |
          RELEASE_VERSION=${{ github.event.inputs.release_version }}
          git tag -a "$RELEASE_VERSION" -m "Release $RELEASE_VERSION"
          git push origin "$RELEASE_VERSION"
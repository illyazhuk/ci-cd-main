name: Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Enter the release version (e.g. v1.2.3)'
        required: true
      client1_branch:
        description: 'Branch for client1 (default: main)'
        required: true
        default: 'main'
      client2_branch:
        description: 'Branch for client2 (default: main)'
        required: true
        default: 'main'
      release_branch:
        description: 'Branch for where to release (default: main)'
        required: true
        default: 'main'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch available branches for client1
        run: |
          echo "Fetching available branches for client1..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/illyazhuk/client1/branches" | jq '.[].name'

      - name: Fetch available branches for client2
        run: |
          echo "Fetching available branches for client2..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/illyazhuk/client2/branches" | jq '.[].name'

      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      
      - name: Update Submodules
        working-directory: .
        run: |
            git submodule update --init --recursive  # Ensure submodules are properly initialized

      - name: Checkout to a new branch
        run: |
            if [[ "${{ github.event.inputs.release_branch }}" == "main" ]] || [[ "${{ github.event.inputs.release_branch }}" == "master" ]]; then
                echo "Skip checkout for main/master branch - default"

            elif git ls-remote --heads origin "${{ github.event.inputs.release_branch }}"; then
                echo "Error: ${{ github.event.inputs.release_branch }} already exists on Remote"
                exit 1
            else
                git checkout -b ${{ github.event.inputs.release_branch }}
            fi
            
      - name: Checkout submodule client1
        uses: actions/checkout@v3
        with:
            token: '${{ secrets.GITHUB_TOKEN }}'
            repository: illyazhuk/client1
            path: default/procentric/app/client1
            ref: ${{ github.event.inputs.client1_branch }} 
      
      - name: Checkout submodule client 2
        uses: actions/checkout@v3
        with:
            token: '${{ secrets.GITHUB_TOKEN }}'
            repository: illyazhuk/client2
            path: default/remote/client2
            ref: ${{ github.event.inputs.client2_branch }}      

      - name: Commit updated submodule pointers
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git diff
          git add .
          git diff-index --quiet HEAD || git commit -m "Update submodules to latest branches"

      - name: Push changes to target branch
        run: |
            # Push to the target branch, ensuring it doesn't override an existing branch (except master/main)
            if [[ "${{ github.event.inputs.release_branch }}" == "main" ]] || [[ "${{ github.event.inputs.release_branch }}" == "master" ]]; then
                git push
            else
                # Make sure the branch is not already pushed to prevent accidental overwrite
                if git ls-remote --heads origin "${{ github.event.inputs.release_branch }}"; then
                    echo "Branch already exists on remote, not pushing."
                    exit 1
                else
                    git push --set-upstream origin ${{ github.event.inputs.release_branch }}
                fi
            fi

      - name: Create and push release tag
        run: |
            # Push to the target branch, ensuring it doesn't override an existing branch (except master/main)
            if [[ "${{ github.event.inputs.release_branch }}" == "main" ]] || [[ "${{ github.event.inputs.release_branch }}" == "master" ]]; then
                RELEASE_VERSION=${{ github.event.inputs.release_version }}
                git tag -a "$RELEASE_VERSION" -m "Release $RELEASE_VERSION"
                git push origin "$RELEASE_VERSION"
            else
                echo "Skip Tag Upload"
            fi

name: Release

on:
  workflow_dispatch:
    inputs:
      build_origin_branch:
        description: 'Enter origin branch (CI-CD-main repo)'
        required: true
        default: 'main'
      use_main_branch:
        description: 'Build with default branch: main'
        type: boolean
        required: false
      release_version:
        description: 'Enter the release version (e.g. v1.2.3)'
        required: true
      client1_branch:
        description: 'Branch for client1 (default: main)'
        required: true
        default: 'main'
      client2_branch:
        description: 'Branch for client2 (default: main)'
        required: true
        default: 'main'
      release_branch:
        description: 'Branch for where to release (default: main)'
        required: true
        default: 'main'
        

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all branches and history are fetched

      - name: Checking user input parameters
        run: |
          # Ensure origin is correctly set
          git remote -v || (echo "Error: No remote repository found." && exit 1)

          # Try fetching the remote branches and check if the specific branch exists
          if git ls-remote --heads origin "${{ github.event.inputs.build_origin_branch }}" | awk '{print $2}' | grep -q "refs/heads/${{ github.event.inputs.build_origin_branch }}"; then
            echo "Found ${{ github.event.inputs.build_origin_branch }} on remote"
          else 
            echo "Error: ${{ github.event.inputs.build_origin_branch }} not found on remote"
            exit 1
          fi

      - name: Checking if client1 branch exists
        run: |
          echo "Fetching available branches for client1..."
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/illyazhuk/client1/branches")
          
          # Check if curl was successful
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch branches from GitHub API"
            exit 1
          fi

          # Check if the branch exists in the fetched response
          if echo "$response" | jq '.[].name' | awk '{print $1}' | grep -q "${{ github.event.inputs.client1_branch }}"; then
            echo "Found ${{ github.event.inputs.client1_branch }} on remote"
          else 
            echo "Error: ${{ github.event.inputs.client1_branch }} not found on remote"
            exit 1
          fi

      - name: Checking if client2 branch exists
        run: |
          echo "Fetching available branches for client2..."
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/illyazhuk/client2/branches")
          
          # Check if curl was successful
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch branches from GitHub API"
            exit 1
          fi

          # Check if the branch exists in the fetched response
          if echo "$response" | jq '.[].name' | awk '{print $1}' | grep -q "${{ github.event.inputs.client2_branch }}"; then
            echo "Found ${{ github.event.inputs.client2_branch }} on remote"
          else 
            echo "Error: ${{ github.event.inputs.client2_branch }} not found on remote"
            exit 1
          fi

      - name: Check if release branch already exists
        run: |
              # Check if the release branch is main or master
              if [[ "${{ github.event.inputs.release_branch }}" == "main" ]] || [[ "${{ github.event.inputs.release_branch }}" == "master" ]]; then
                echo "Skip validation for main/master branch"
              else
                # Ensure the branch doesn't already exist on the remote to prevent accidental overwrite
                if git ls-remote --heads origin "${{ github.event.inputs.release_branch }}" | awk '{print $2}' | grep -q "refs/heads/${{ github.event.inputs.release_branch }}"; then
                  echo "${{ github.event.inputs.release_branch }} already exists on remote, creation not allowed."
                  exit 1
                else
                  echo "${{ github.event.inputs.release_branch }} does not exist on remote, creation allowed."
                fi
              fi

      - name: Validate and check release version
        run: |
          # Get the release version from the input
          RELEASE_VERSION=${{ github.event.inputs.release_version }}
          
          # Validate the version format (e.g. v1.2.3)
          if [[ ! "$RELEASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format. The version should be in the format (e.g. v1.2.3)"
            exit 1
          fi

          # Get the latest tag from the repository
          LATEST_TAG=$(git describe --tags --abbrev=0)

          # If no tags are found, set a default version
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found in the repository. This will be the first release."
          else
            # Compare versions
            if [[ "$(echo -e "$RELEASE_VERSION\n$LATEST_TAG" | sort -V | head -n1)" == "$RELEASE_VERSION" ]]; then
              echo "Error: Release version $RELEASE_VERSION must be higher than the latest tag $LATEST_TAG."
              exit 1
            else
              echo "Release version $RELEASE_VERSION is valid and higher than the latest tag $LATEST_TAG."
            fi
          fi
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
      
    #   - name: Update Submodules
    #     working-directory: .
    #     run: |
    #         git submodule update --init --recursive  # Ensure submodules are properly initialized

      - name: Checkout to a new branch
        run: |
            if [[ "${{ github.event.inputs.release_branch }}" == "main" ]] || [[ "${{ github.event.inputs.release_branch }}" == "master" ]]; then
                echo "Skip checkout for main/master branch - default"

            elif git ls-remote --heads origin "${{ github.event.inputs.release_branch }}"| grep -q "${{ github.event.inputs.release_branch }}"; then
                echo "Error: ${{ github.event.inputs.release_branch }} already exists on Remote"
                exit 1
            else
                git checkout -b ${{ github.event.inputs.release_branch }}
            fi
            
    
      - name: Checkout submodule client1
        uses: actions/checkout@v3
        with:
              token: '${{ secrets.GITHUB_TOKEN }}'
              repository: illyazhuk/client1
              path: default/procentric/app/client1
              ref: ${{ github.event.inputs.client1_branch }} 
      
      - name: Checkout submodule client 2
        uses: actions/checkout@v3
        with:
            token: '${{ secrets.GITHUB_TOKEN }}'
            repository: illyazhuk/client2
            path: default/remote/client2
            ref: ${{ github.event.inputs.client2_branch }}      

      - name: Commit updated submodule pointers
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git diff
          git add .
          git diff-index --quiet HEAD || git commit -m "Update submodules to latest branches"

      - name: Push changes to target branch
        run: |
            # Push to the target branch, ensuring it doesn't override an existing branch (except master/main)
            if [[ "${{ github.event.inputs.release_branch }}" == "main" ]] || [[ "${{ github.event.inputs.release_branch }}" == "master" ]]; then
                git push
            else
                # Make sure the branch is not already pushed to prevent accidental overwrite
                if git ls-remote --heads origin "${{ github.event.inputs.release_branch }}"| grep -q "${{ github.event.inputs.release_branch }}"; then
                    echo "Branch already exists on remote, not pushing."
                    exit 1
                else
                    git push --set-upstream origin ${{ github.event.inputs.release_branch }}
                fi
            fi

      - name: Create and push release tag
        run: |
            # Push to the target branch, ensuring it doesn't override an existing branch (except master/main)
            if [[ "${{ github.event.inputs.release_branch }}" == "main" ]] || [[ "${{ github.event.inputs.release_branch }}" == "master" ]]; then
                RELEASE_VERSION=${{ github.event.inputs.release_version }}
                git tag -a "$RELEASE_VERSION" -m "Release $RELEASE_VERSION"
                git push origin "$RELEASE_VERSION"
            else
                echo "Skip Tag Upload"
            fi

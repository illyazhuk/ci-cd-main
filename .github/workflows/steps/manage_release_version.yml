name: Manage release version
runs:
    using: "composite"
    steps:
      - name: Manage release version
        run: |
          USER_VERSION_VALID=false
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          echo "Validate release version compliance"

          if [[ ! "$RELEASE_VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Invalid version format."
          else
              USER_VERSION_VALID=true
          fi

          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")

          if [ "$LATEST_TAG" = "none" ]; then
              LATEST_TAG="0.0.0"
          fi

          if [[ "$(echo -e "$RELEASE_VERSION\n$LATEST_TAG" | sort -V | head -n1)" == "$RELEASE_VERSION" ]]; then
              echo "Error: Release version $RELEASE_VERSION must be higher than the latest tag $LATEST_TAG."
              USER_VERSION_VALID=false
          fi

          if [ "$USER_VERSION_VALID" = true ]; then
              NEW_VERSION="$RELEASE_VERSION"
          else
              VERSION_PATTERN="^v?([0-9]+)\.([0-9]+)\.([0-9]+)$"
              if [[ "$LATEST_TAG" =~ $VERSION_PATTERN ]]; then
                MAJOR="${BASH_REMATCH[1]}"
                MINOR="${BASH_REMATCH[2]}"
                PATCH="${BASH_REMATCH[3]}"
                PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              else
                NEW_VERSION="0.0.1"
              fi
          fi

          echo "RELEASE_TAG=$NEW_VERSION" >> $GITHUB_ENV

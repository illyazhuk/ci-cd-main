name: Release default
on:
  workflow_dispatch:
    inputs:
      main_checkmark:
        description: 'Build from main branches'
        default: false
        type: boolean
        required: true
      release_version:
        description: 'Enter the release version (e.g. v1.2.3)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout origin (ci-cd-main) repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all branches and history are fetched

      - name: Set up branches based on checkmark input
        id: set_branches
        uses: ./steps/set_up_branches_checkmark.yml

      - name: Checkout submodules
        uses: ./steps/checkout_submodules.yml

      - name: Checkout to a new branch
        uses: ./steps/chrckout_to_new_branch.yml

      - name: Commit updated submodule pointers
        uses: ./steps/commit_updated_submodule_pointers.yml

      - name: manage-release-version
        uses: ./steps/manage_release_version.yml 
        run: |
            USER_VERSION_VALID=false
            # Get the release version from the input
            RELEASE_VERSION="${{ github.event.inputs.release_version }}"
            echo "Validate release version compliance"
    
            # Validate the version format (e.g. v1.2.3)
            if [[ ! "$RELEASE_VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Error: Invalid version format. The version should be in the format (e.g. v1.2.3)"
                #exit 1 # Uncomment this if you want to terminate when the version is invalid
            else
                USER_VERSION_VALID=true
            fi

            echo "Fetching latest tag from repo"
            # Fetch all tags to ensure the latest tags are available locally
            git fetch --tags

            # Get the latest tag from the repository by sorting tags
            LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)

            # Get the latest tag from the repository
            #LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
            echo "Found Latest Tag on repository $LATEST_TAG"

            if [ "$LATEST_TAG" = "none" ]; then
                echo "Warning: No tags found in the repository."
                LATEST_TAG="0.0.0"  # Set a default version if needed
            fi

            # Check if user version is greater than latest tag
            if [[ "$(echo -e "$RELEASE_VERSION\n$LATEST_TAG" | sort -V | head -n1)" == "$RELEASE_VERSION" && "$USER_VERSION_VALID" == true ]]; then
                echo "Error: Release version $RELEASE_VERSION must be higher than the latest tag $LATEST_TAG."
                USER_VERSION_VALID=false
            fi
    
            # If user input is valid, use the user version; otherwise, auto-increment
            if [ "$USER_VERSION_VALID" = true ]; then
                NEW_VERSION="$RELEASE_VERSION"
            else
                echo "Extracting major, minor, patch from the latest tag $LATEST_TAG"
                VERSION_PATTERN="^v?([0-9]+)\.([0-9]+)\.([0-9]+)$"
                if [[ "$LATEST_TAG" =~ $VERSION_PATTERN ]]; then
                    MAJOR="${BASH_REMATCH[1]}"
                    MINOR="${BASH_REMATCH[2]}"
                    PATCH="${BASH_REMATCH[3]}"
                    PATCH=$((PATCH + 1))  # Increment the patch version
                    NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                else
                    NEW_VERSION="0.0.1"
                fi
            fi

            # If no tags are found, set a default version
            if [ -z "$LATEST_TAG" ]; then
                echo "No tags found in the repository. This will be the first release."
            else
                # Compare versions
                if [[ "$(echo -e "$NEW_VERSION\n$LATEST_TAG" | sort -V | head -n1)" == "$NEW_VERSION" ]]; then
                    echo "Error: Release version $NEW_VERSION must be higher than the latest tag $LATEST_TAG."
                    exit 1
                else
                    echo "Release version $NEW_VERSION is valid and higher than the latest tag $LATEST_TAG."
                fi
            fi
    
            # Output the new release version to the GitHub environment for later steps
            echo "RELEASE_TAG=$NEW_VERSION" >> $GITHUB_ENV


      - name: Push changes to target branch
        uses: ./steps/push_changes.yml
    
      - name: Create and push release tag
        run: |
            echo "Configuring release tag"

            # Check if the branch is 'main' or 'master'
            if [[ "$RELEASE_BRANCH" == "main" ]] || [[ "$RELEASE_BRANCH" == "master" ]]; then
                echo "Target branch is main - create a release tag"
    
                # Create the tag using the RELEASE_TAG variable
                git tag -a "$RELEASE_TAG" -m "Release $RELEASE_TAG"
    
                # Push the tag to the remote repository
                git push origin "$RELEASE_TAG"
            else
                echo "Custom target branch - release tag is not allowed"
            fi


